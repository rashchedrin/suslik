binary search tree: rotate right

#####
/*
{ not (l == 0) /\ sz == 1 + sz1 + sz2  /\  0 <= sz1 /\  0 <= sz2  /\  0 <= v /\ v <= 7 /\ hi1 <= v /\ v <= lo2 ;
  ret :-> a ** [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** bst(l, sz1, lo1, hi1) ** bst(r, sz2, lo2, hi2) }
void bst_right_rotate (loc x, loc ret)
{ sz3 + sz4 == sz1 + sz2 /\ sz == 1 + sz1 + sz2  /\  0 <= sz3 /\  0 <= sz4  /\  0 <= v3 /\ v3 <= 7 /\ hi3 <= v3 /\ v3 <= lo4 ;
  ret :-> y ** [y, 3] ** y :-> v3 ** (y + 1) :-> l3 ** (y + 2) :-> x ** bst(l3, sz3, lo3, hi3) ** bst(x, sz4, lo4, hi4) }
*/
{}void bst_right_rotate (loc x, loc ret){}
#####

void bst_right_rotate (loc x, loc ret) {
  let l2 = *(x + 1);
  let r12 = *(l2 + 2);
  *ret = l2;
  *(x + 1) = r12;
  *(l2 + 2) = x;
}